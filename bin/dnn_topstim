#! /usr/bin/env python
import numpy as np
import os, copy, argparse
from os.path import join as pjoin
from os.path import exists as pexist
from dnnbrain.dnn.base import array_statistic
from dnnbrain.dnn.core import DNN, Stimulus, Mask

# For specific layer and channel in DNN network,
# select topK stimulus from a set of stimulus.


def main():

    parser = argparse.ArgumentParser()
    args = parser.parse_args()

    parser.add_argument('-net',
                        metavar='Name of DNN Model',
                        type=str, required=True,
                        help='Name of DNN Model, which should be placed in system variable '
                                'DNNBRAIN_MODEL_DIR with format *.pth. ')
    parser.add_argument('-top',
                        metavar='Number of Top Stimulus',
                        type=int, required=True,
                        help='Number of top stimulus.For example, assign top = 5, and top 5 '
                        'image for each <layer,channel> pair will be generated. ')
    parser.add_argument('-stim',
                        metavar='Path of Stimulus',
                        type=str, required=True,
                        help='A *.stim.csv file contained stimuli to calculate. ')
    parser.add_argument('-dmask',
                        metavar='Path of Dmask',
                        type=str, required=True,
                        help='A *.dmask.csv list of interested layers and channels. ')
    parser.add_argument('-out',
                        metavar='Path of Output',
                        type=str, required=True,
                        help='Output directory to save .stim.csv for top stimulus, '
                                'and associated .act.hd5 file. ')

    # Load net/stim/dmask
    dnn = DNN(args.net)
    stim = Stimulus(args.stim)
    dmask = Mask(args.dmask)

    # Extract activation
    activation = dnn.compute_activation(stim, dmask)

    # Create output file if inexistent
    if not pexist(args.out):
        os.mkdir(args.out)

    for ly in activation.layers:
        raw = activation.get(ly)
        tmp = np.zeros(raw.shape)[0:args.top, :, :, :]
        # Use array_statistic in dnn.base to do max
        act = array_statistic(raw, 'max', axis=(2, 3), keepdims=False).T
        # Do sorting and arg-sorting
        sort = np.argsort(-act, axis=1, kind='heapsort')[:, 0:args.top]
        act = -np.sort(-act, axis=1, kind='heapsort')[:, 0:args.top]
        for cid, chn in enumerate(dmask.get(ly)['chn']):
            # Set .stim.csv act info
            chn_stim = copy.deepcopy(stim)
            chn_csv = ly + '_chn' + str(chn) + '_top' + str(args.top) + '.stim.csv'
            chn_stim.set('stimID', stim.get('stimID')[sort[cid, :]])
            # Save .stim.csv act info
            chn_stim.set('value', act[cid, :])
            chn_stim.save(pjoin(args.out, chn_csv))
            tmp[:, cid, :, :] = raw[sort[cid, :], cid, :, :]
        # Set .act.h5 act file for each layer
        activation.set(ly, tmp)

    # Save .act.h5 act file for all
    activation.save(pjoin(args.out, 'result.act.h5'))


if __name__ == '__main__':
    main()
