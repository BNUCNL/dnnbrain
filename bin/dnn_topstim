#! /usr/bin/env python
import numpy as np
import os, copy, argparse
from os.path import join as pjoin
from os.path import exists as pexist
from dnnbrain.dnn.core import DNN, Stimulus, Mask

"""
    For specific layer and channel in a DNN network,
    select topK stimulus from a set of stimulus.
"""

class top_image():

    def __init__(self,net,stim,dmask):
        """
        Initialization of top_image Class.

        Parameters:
        ----------
        net[str]: deep neural network name
        stim[str]: a path of *.stim.csv
        dmask[str]: a path of *.dmask.csv

        """
        # --- Load net ---
        self.dnn = DNN(net)
        # --- Load stimulus file ---
        self.stim = Stimulus(stim)
        '''
        .stim.csv 's format should be like:
            type=image
            path=D:/data/dnn/test/img
            data=stimID
            M001.jpg
            M002.jpg
            M003.jpg
            M004.jpg
        '''
        # --- Load mask file ---
        self.dmaskname = dmask
        self.dmask = Mask(self.dmaskname)
        '''
        .dmask.csv 's format should be like:
            conv3=chn
            256,257,258
            conv5=chn
            125,126,17
            fc3=chn
            54,66,272,888
        '''

    def compute_act(self):
        # --- Extract activation ---
        self.act = self.dnn.compute_activation(self.stim, self.dmask)

    def save_top(self,top,out):
        """
        Save TopK as *.stim.csv & *.act.h5
        Parameters:
        ----------
        top[str]: Number of Top Stimulus
        out[str]: Output file of result

        """
        self.top = top
        self.out = out
        # --- Count topK ---
        for layer in self.act.layers:
            fshape = self.act.get(layer).shape
            tmplayeract = np.zeros([self.top,fshape[1],fshape[2], fshape[3]])
            fmax = np.max(self.act.get(layer).reshape(fshape[0],fshape[1],fshape[2]*fshape[3]),2)
            fsort = np.zeros([fmax.shape[1],self.top])
            for fchnID,fchn in enumerate(self.dmask.get(layer)['chn']):
                tmpstim = copy.deepcopy(self.stim)
                fsort = np.argsort(-fmax[:,fchnID])[0:self.top]
                tmpstim.set('stimID',self.stim.get('stimID')[fsort])
                tmpstim.set('value',fmax[fsort,fchnID])
                if not pexist(self.out):
                    os.mkdir(self.out)
                CSVname = layer + '_chn' + str(fchn) + '_top' + str(self.top) + '.stim.csv'
                tmplayeract[:,fchnID,:,:] = self.act.get(layer)[[fsort],fchnID,:,:]
                tmpstim.save(pjoin(self.out,CSVname))
            self.act.set(layer, tmplayeract)
        self.act.save(pjoin(self.out,'act_result.act.h5'))


def main():

    parser = argparse.ArgumentParser()

    parser.add_argument('-net',
                        metavar='Name of DNN Model',
                        type=str, required=True,
                        help='Name of DNN Model.It should be placed in '
                                'system variable DNNBRAIN_MODEL_DIR with format *.pth. ')

    parser.add_argument('-top',
                        metavar='Number of Top Stimulus',
                        type=int, required=True,
                        help='Number of top stimulus.For example, assign top = 5, and a  '
                                '*.stim.csv file for top 5 image for each <layer,channel> pair '
                                'will be generated. ')

    parser.add_argument('-stim',
                        metavar='stimulus_path',
                        type=str, required=True,
                        help='A *.stim.csv file contained stimuli to calculate. ')

    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        type=str, required=True,
                        help='A *.dmask.csv list of interested layers and channels. ')

    parser.add_argument('-out',
                        metavar='Output file of result',
                        type=str, required=True,
                        help='Output directory to save top stimulus for interested layers, '
                                'channels, and assocaited *.act.hd5 file. ')

    args = parser.parse_args()

    topimg = top_image(args.net,args.stim,args.dmask)
    topimg.compute_act()
    topimg.save_top(args.top,args.out)

if __name__ == '__main__':
    main()
