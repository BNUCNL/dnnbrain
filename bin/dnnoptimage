#! /usr/bin/env python

"""
find the characterize relative to one unit
Author: Yiyuan Zhang @ BNU
"""

#import some packages needed
import argparse
from torchvision import models
from dnnbrain.VIZ import dnnoptimage


#define main function
def main():
    
    parser = argparse.ArgumentParser(description='DNN units optimal stimuli')
    
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        choices=['alexnet', 'vgg16', 'vgg19'],
                        help = 'specific name of CNN')

    parser.add_argument('-layer',
                        type = int,
                        required = True,
                        help = 'activation for specific layers')
    
    parser.add_argument('-channel',
                        type = int,
                        required = True,
                        help = 'activation for specific channels')

    parser.add_argument('-unit_x',
                        type = int,
                        required = True,
                        help = 'activation for specific units x_axis')
    
    parser.add_argument('-unit_y',
                        type = int,
                        required = True,
                        help = 'activation for specific units y_axis')
    
    parser.add_argument('-outdir',
                        type = str,
                        required = True,
                        help = 'output directory in Linux')
    
    args = parser.parse_args()
    
    #define model
    def model(net):
        if net == 'alexnet':
            model = models.alexnet(pretrained=True)
            return model
        elif net == 'vgg16':
            model = models.vgg16(pretrained=True)
            return model
        elif net == 'vgg19':
            model = models.vgg19(pretrained=True)
            return model
        else:
            raise Exception('Network was not supported, please contact author for implementation.')
      
    model = model(args.net)
    
    for param in model.parameters():
        param.requires_grad = False 
    
    #Instance
    layer_vis = dnnoptimage.CNNLayerVisualization(model.features, args.layer, args.channel)
    
    #run the function
    try:
        layer_vis.visualise_layer_with_hooks(args.net, n_step, args.outdir, args.unit_x, args.unit_y)
    except:
        layer_vis.visualise_layer_with_hooks(args.net, n_step, args.outdir)
    
    
if __name__ == '__main__':
    n_step = 51
    main()
    
