#! /usr/bin/env python

"""
find the characterize relative to one unit
Author: Yiyuan Zhang @ BNU
"""


#import some packages needed
import argparse
from PIL import Image
from torchvision import models
from dnnbrain.viz import dnnopt_operation
from dnnbrain.utils.iofiles import NetLoader


def main():
    
    parser = argparse.ArgumentParser(description='DNN units optimal stimuli')
    
    parser.add_argument('-net',
                        type = str,
                        required = True,
			metavar='[NetName]',
                        choices=['alexnet', 'vgg11'],
                        help = 'specific name of CNN')

    parser.add_argument('-layer',
                        type = str,
                        required=True,
			metavar='[LayerName]',
			help='activation for specific layers, please input conv1 or fc1 for activation')
    
    parser.add_argument('-channel',
                        type = int,
                        required = True,
			metavar='[ChannelNumber]',
                        help = 'activation for specific channels')

    parser.add_argument('-unit',
                        type = int,
                        required = False,
			metavar='[UnitNember]',
                        help = 'position for a specific unit')
    
    parser.add_argument('-outdir',
                        type = str,
                        required = True,
			metavar='[OutputDir]',
                        help = 'output directory in Linux')
    
    args = parser.parse_args()
      
    netloader = NetLoader(args.net)
    
    for param in netloader.model.parameters():
        param.requires_grad = False 
    
    layer_vis = dnnopt_operation.CNNLayerVisualization(netloader.model.features, netloader.layer2indices[args.layer][1], args.channel)
    
    try:
        layer_vis.visualise_layer_with_hooks(args.net, 51, args.outdir, args.unit)
        im = Image.fromarray(layer_vis.created_image)
        im.save(args.outdir)
    except:
        layer_vis.visualise_layer_with_hooks(args.net, 51, args.outdir)
        im = Image.fromarray(layer_vis.created_image)
        im.save(args.outdir)
    
    
if __name__ == '__main__':
    main()
