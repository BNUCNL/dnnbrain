#! /usr/bin/env python

"""
Characterise brain activation's representation dissimilarity matrix (RDM).
"""

import time
import argparse
import numpy as np

from scipy.stats import zscore
from scipy.spatial.distance import pdist
from dnnbrain.brain.io import load_brainimg
from dnnbrain.dnn.core import RDM, Stimulus


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-nif',
                        metavar='NeuroImageFile',
                        required=True,
                        type=str,
                        help='brain activation image')
    parser.add_argument('-bmask',
                        metavar='BrainMask',
                        required=True,
                        type=str,
                        help="brain mask image"
                             "Each non-zero value will be regarded as a ROI label."
                             "The activation pattern in each ROI will be used to calculate RDM.")
    parser.add_argument('-roi',
                        metavar='ROI',
                        required=False,
                        type=int,
                        nargs='+',
                        help="Specify which ROI labels in bmask will be used; "
                             "Default using all labels.")
    parser.add_argument('-cate',
                        metavar='Category',
                        type=str,
                        help="a .stim.csv file which contains category information (i.e. 'label' item)"
                             "If used, do rsa category-wisely that average activation pattern "
                             "before calculating the distance. And the row/column order of RDM is "
                             "organized from small to big according to the 'label'."
                             "Note: the 'label' here is an item in the .stim.csv file rather than "
                             "the label in '-roi' option!")
    parser.add_argument('-metric',
                        metavar='Metric',
                        type=str,
                        default='euclidean',
                        help="Specify metric used to calculate distance.")
    parser.add_argument('-zscore',
                        action='store_true',
                        help="Standardize feature values for each sample by using zscore.")
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='output filename with suffix as .rdm.h5')
    args = parser.parse_args()

    # load neuroimaging data
    data, _ = load_brainimg(args.nif)
    bmask, _ = load_brainimg(args.bmask, ismask=True)
    if args.roi is None:
        rois = np.unique(bmask)
        rois = rois[rois != 0]
    else:
        rois = args.roi

    # -prepare category indices-
    if args.cate is not None:
        stim = Stimulus()
        stim.load(args.cate)
        assert len(stim) == data.shape[0]

        # deal with labels
        labels = stim.get('label')
        labels_uniq = np.unique(labels)
        labels_indices = [np.where(labels == label)[0] for label in labels_uniq]
        n_label = len(labels_uniq)
        print("Finished preparing {} categories' indices.".format(n_label))

    # calculate RDM
    rdm = RDM()
    rdm.rdm_type = 'bRDM'
    for roi in rois:
        time1 = time.time()
        # get ROI pattern
        X = data[:, bmask == roi]

        if args.zscore:
            print('Standardizing ROI{} pattern for each sample.'.format(roi))
            X = zscore(X, 1)

        if args.cate is not None:
            print('Averaging ROI{} pattern within each category.'.format(roi))
            X_tmp = np.zeros((n_label, X.shape[1]))
            for idx, label_indices in enumerate(labels_indices):
                X_tmp[idx] = np.mean(X[label_indices], axis=0)
            X = X_tmp

        # calculate RDM
        rdm_arr = pdist(X, metric=args.metric)
        rdm.set(str(roi), rdm_arr, triu=True)
        print('Finished roi{}: cost {} seconds'.format(
            roi, time.time() - time1))

    # save
    rdm.save(args.out)


if __name__ == '__main__':
    main()
