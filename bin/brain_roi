#! /usr/bin/env python

"""
Extract brain ROI signals
"""

import argparse
import numpy as np

from dnnbrain.brain import io as brain_io
from dnnbrain.brain.core import ROI


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-nif',
                        type=str,
                        required=True,
                        metavar='BrainAct',
                        help='brain activation image')
    parser.add_argument('-mask',
                        type=str,
                        required=True,
                        metavar='Mask',
                        help='brain mask image'
                             'Each non-zero value will be regarded as a ROI label.')
    parser.add_argument('-method',
                        type=str,
                        default='mean',
                        choices=['mean', 'max', 'std'],
                        metavar='Method',
                        help='Method to summary signals in ROI. (default: mean)')
    parser.add_argument('-out',
                        type=str,
                        required=True,
                        metavar='Output',
                        help='Output file with suffix as .roi.h5')
    args = parser.parse_args()

    # Get brain image data
    brainact, _ = brain_io.load_brainimg(args.nif, ismask=False)
    brainmask, _ = brain_io.load_brainimg(args.mask, ismask=True)
    brainmask = brainmask.astype(np.int)
    masklabels = np.unique(brainmask)
    masklabels = masklabels[masklabels != 0]

    # Extract brain signals
    extsignals = brain_io.extract_brain_activation(brainact, brainmask, masklabels, method=args.method)
    extsignals = np.array(extsignals).T

    # Save
    roi_names = [str(ml) for ml in masklabels]
    ROI(roi_names, extsignals).save(args.out)


if __name__ == "__main__":
    main()