#! /usr/bin/env python

"""
Characterise DNN activation's representation dissimilarity matrix (RDM).
"""

import time
import argparse
import numpy as np

from scipy.stats import zscore
from scipy.spatial.distance import pdist
from dnnbrain.dnn.core import Activation, RDM, Stimulus
from dnnbrain.utils.util import gen_dmask


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="layer names of interest")
    parser.add_argument('-chn',
                        metavar='Channel',
                        type=int,
                        nargs='+',
                        help="channel numbers of interest "
                             "Default is using all channels of each layer specified by -layer.")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels, rows and columns of interest.')
    parser.add_argument('-iteraxis',
                        type=str,
                        metavar='Axis',
                        choices=('channel', 'row_col'),
                        help="Iterate along the specified axis. "
                             "channel: Do rsa on each channel. "
                             "row_col: Do rsa on each location (row_idx, col_idx). "
                             "default: Do rsa on the whole layer.")
    parser.add_argument('-cate',
                        metavar='Category',
                        type=str,
                        help="a .stim.csv file which contains category information (i.e. 'label' item)"
                             "If used, do rsa category-wisely that average activation pattern "
                             "before calculating the distance. And the row/column order of RDM is "
                             "organized from small to big according to the 'label'.")
    parser.add_argument('-metric',
                        metavar='Metric',
                        type=str,
                        default='euclidean',
                        help="Specify metric used to calculate distance.")
    parser.add_argument('-zscore',
                        action='store_true',
                        help="Standardize feature values for each sample by using zscore.")
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='output filename with suffix .rdm.h5')
    args = parser.parse_args()

    # -load activation start-
    # initialize DNN mask
    if args.layer is None and args.dmask is None:
        dmask = None
    else:
        channels = 'all' if args.chn is None else args.chn
        dmask = gen_dmask(args.layer, channels, args.dmask)
    activation = Activation()
    activation.load(args.act, dmask)
    print('Finish loading activation: ', args.act)
    # -load activation end-

    # -prepare category indices-
    if args.cate is not None:
        stim = Stimulus()
        stim.load(args.cate)

        # deal with labels
        labels = stim.get('label')
        labels_uniq = np.unique(labels)
        labels_indices = [np.where(labels == label)[0] for label in labels_uniq]
        n_label = len(labels_uniq)
        print("Finished preparing {} categories' indices.".format(n_label))

    # calculate RDM
    rdm = RDM()
    rdm.rdm_type = 'dRDM'
    for layer in activation.layers:
        time1 = time.time()
        # get DNN activation and reshape it to 3D
        activ = activation.get(layer)
        n_stim, n_chn, n_row, n_col = activ.shape
        n_row_col = n_row * n_col
        activ = activ.reshape((n_stim, n_chn, n_row_col))

        # transpose axis to make activ's shape as (n_stimulus, n_iterator, n_element)
        if args.iteraxis is None:
            activ = activ.reshape((n_stim, 1, -1))
        elif args.iteraxis == 'row_col':
            activ = activ.transpose((0, 2, 1))
        elif args.iteraxis == 'channel':
            pass
        else:
            raise ValueError("Unsupported iter_axis:", args.iteraxis)
        n_stim, n_iter, n_elem = activ.shape

        # calculate RDM
        rdm_arr = []
        for iter_idx in range(n_iter):
            X = activ[:, iter_idx, :]

            if args.zscore:
                print('Standardizing layer{}-iter{} pattern '
                      'for each sample.'.format(layer, iter_idx+1))
                X = zscore(X, 1)

            if args.cate is not None:
                assert len(stim) == n_stim
                print('Averaging layer{}-iter{} pattern '
                      'within each category.'.format(layer, iter_idx+1))
                X_tmp = np.zeros((n_label, X.shape[1]))
                for idx, label_indices in enumerate(labels_indices):
                    X_tmp[idx] = np.mean(X[label_indices], axis=0)
                X = X_tmp

            rdm_arr.append(pdist(X, metric=args.metric))
        rdm.set(layer, np.asarray(rdm_arr), triu=True)
        print('Finished layer-{}: cost {} seconds'.format(layer, time.time() - time1))

    # save
    rdm.save(args.out)


if __name__ == '__main__':
    main()
