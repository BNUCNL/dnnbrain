#! /usr/bin/env python

"""
Decode DNN activation from brain response
"""

import os
import time
import argparse
import numpy as np

from os.path import join as pjoin
from dnnbrain.dnn.core import Activation
from dnnbrain.brain.core import ROI, BrainDecoder
from dnnbrain.brain.io import load_brainimg
from dnnbrain.utils.util import gen_dmask


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-anal',
                        metavar='Analysis',
                        required=True,
                        type=str,
                        choices=('uv', 'mv'),
                        help="uv: Do univariate mapping."
                             "mv: Do multivariate mapping.")
    parser.add_argument('-resp',
                        metavar='Response',
                        required=True,
                        type=str,
                        help='a .roi.h5/.nii file '
                             'If it is .nii file, -roi will be ignored. '
                             'If it is .roi.h5 file, -bmask will be ignored')
    parser.add_argument('-bmask',
                        metavar='BrainMask',
                        type=str,
                        help='Brain mask is used to extract activation locally. '
                             'Only used when the response file is .nii file. '
                             'If not given, the whole brain response will be used.')
    parser.add_argument('-roi',
                        metavar='RoiName',
                        type=str,
                        nargs='+',
                        help='Specify ROI names for decoding. '
                             'Default is using all ROIs in .roi.h5 file.')
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="layer names of interest "
                             "Default using all layers in .act.h5 file")
    parser.add_argument('-chn',
                        metavar='Channel',
                        type=int,
                        nargs='+',
                        help="channel numbers of interest "
                             "Default using all channels of each layer specified by -layer.")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels, rows and columns of interest.')
    parser.add_argument('-model',
                        metavar='Model',
                        required=True,
                        type=str,
                        choices=('glm', 'lasso'),
                        help='Select a model to predict dnn activation by brain responses. '
                             'Use glm (general linear model) for regression. '
                             'Use lasso (lasso regression) for regression.')
    parser.add_argument('-scoring',
                        metavar='Scoring',
                        type=str,
                        default='explained_variance',
                        help="model evaluation rules: "
                             "correlation or sklearn scoring parameters"
                             "Default is explained_variance.")
    parser.add_argument('-cv',
                        metavar='CrossValidationFoldNumber',
                        type=int,
                        default=3,
                        help='cross validation fold number')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output directory')
    args = parser.parse_args()

    # -Load response start-
    if args.resp.endswith('.roi.h5'):
        roi = ROI()
        roi.load(args.resp, args.roi)
        Y = roi.data

    elif args.resp.endswith('.nii') or args.resp.endswith('.nii.gz'):
        Y, header = load_brainimg(args.resp)
        bshape = Y.shape[1:]

        # Get resp data within brain mask
        if args.bmask is None:
            bmask = np.any(Y, 0)
        else:
            bmask, _ = load_brainimg(args.bmask, ismask=True)
            assert bshape == bmask.shape, 'brain mask and brain response mismatched in space'
            bmask = bmask.astype(np.bool)
        Y = Y[:, bmask]

    else:
        raise IOError('Only .roi.h5 and nifti/cifti are supported')
    print('Finish loading response: ', args.resp)
    # -Load response end-

    # -load activation start-
    # initialize DNN mask
    if args.layer is None and args.dmask is None:
        dmask = None
    else:
        channels = 'all' if args.chn is None else args.chn
        dmask = gen_dmask(args.layer, channels, args.dmask)
    activation = Activation()
    activation.load(args.act, dmask)
    print('Finish loading activation: ', args.act)
    # -load activation end-

    # -prediction start-
    time1 = time.time()
    decoder = BrainDecoder(Y, args.anal, args.model, args.cv, args.scoring)
    decode_dict = decoder.decode_dnn(activation)
    print('Finish prediction: cost {} seconds.'.format(time.time()-time1))
    # -prediction end-

    # -save out start-
    for layer, data in decode_dict.items():
        # prepare directory
        trg_dir = pjoin(args.out, layer)
        if not os.path.isdir(trg_dir):
            os.makedirs(trg_dir)

        # save files
        for k, v in data.items():
            np.save(pjoin(trg_dir, k), v)

        print('Finish save {}.'.format(layer))
    # -save out end-


if __name__ == '__main__':
    main()
