#! /usr/bin/env python

"""
Convolve DNN activation with SPM canonical hemodynamic response function.
And match it with the time points of Brain activation.
"""

import argparse

from dnnbrain.dnn.core import Activation, Stimulus
from dnnbrain.utils.util import gen_dmask


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="layer names of interest")
    parser.add_argument('-chn',
                        metavar='Channel',
                        type=int,
                        nargs='+',
                        help="channel numbers of interest "
                             "Default is using all channels of each layer specified by -layer.")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels, rows and columns of interest.')
    parser.add_argument('-stim',
                        metavar='Stimulus',
                        required=True,
                        type=str,
                        help='a .stim.csv file which contains onsets and durations')
    parser.add_argument('-tr',
                        metavar='TR',
                        required=True,
                        type=float,
                        help='repetition time of BOLD signal acquisition')
    parser.add_argument('-n_vol',
                        metavar='N_volume',
                        required=True,
                        type=int,
                        help='the number of volumes of BOLD signal')
    parser.add_argument('-ops',
                        metavar='Ops',
                        type=int,
                        default=100,
                        choices=(10, 100, 1000),
                        help='oversampling number per second')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='output filename with suffix as .act.h5')
    args = parser.parse_args()

    # load stimuli
    stimuli = Stimulus()
    stimuli.load(args.stim)

    # initialize DNN mask
    if args.layer is None and args.dmask is None:
        dmask = None
    else:
        channels = 'all' if args.chn is None else args.chn
        dmask = gen_dmask(args.layer, channels, args.dmask)

    # do convolution
    activation = Activation()
    activation.load(args.act, dmask)
    activation = activation.convolve_hrf(stimuli.get('onset'), stimuli.get('duration'),
                                         args.n_vol, args.tr, args.ops)
    activation.save(args.out)


if __name__ == '__main__':
    main()
