#! /usr/bin/env python

"""
Extract activation from specific layer from a DNN
Author: YukunQu @ BNU
Reviewer:
"""

import argparse
from torchvision import transforms
from torch.util.data import DataLoader
from dnnbrain.core import model_operation
from dnnbrain.utils import iofiles

def main():
    parser = argparse.ArgumentParser(description='Extract activation from specific layer from a DNN')
    parser.add_argument('-net',
                        type=str,
                        required=True,
                        metavar='NetName',
                        help='convolutional network name')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='a csv file contains picture stimulus',
                        help='table contains picture names, conditions and picture onset time.\
                              This csv_file helps us connect cnn activation to brain images.\
                              Please organize your information as:\
                              [PicPath]\
                              stimID     condition   onset(optional) measurement(optional)\
                              face1.png  face        1.1             3\
                              face2.png  face        3.1             5\
                              scene1.png scene       5.1             4'
                        )
    parser.add_argument('-layer',
                        type=str,
                        required=True,
                        metavar='Layer',
                        help='activation for specific layers, please input conv1 or fc1 for activation')
    parser.add_argument('-channel',
                        type=int,
                        required=False,
                        nargs='*',
                        metavar='Channel',
                        help='activation for specific channels')
    parser.add_argument('-out',
                        type=str,
                        required=True,
                        dest='outdir',
                        metavar='Output Directory',
                        help='output directory')
    args = parser.parse_args()

	# See below is the framework of this command 
	# ------------------------------------
	# Streamline
	# ------------------------------------
	# 1 Call activation extraction from 'core' to get CNN's activations. Parameters: -net, -in, -layer, -channel
	# 2 Save activation data and picutre list to csv files. Parameters: -activation,-net, -out, -layer, -channel, -dnnpicname
	
	
	# DNN activation extraction 
    netloader = iofiles.NetLoader(args.net)
    imgcropsize = netloader.img_size
    transform = transforms.Compose([transforms.Resize(imgcropsize),
                                    transforms.ToTensor()])                            
    picdataset = iofiles.PicDataset(args.stim, transform=transform)
    picdataloader = DataLoader(picdataset, batch_size=8, shuffle=False)
    dnn_act = model_operation.dnn_activation(picdataloader, args.net, args.layer, args.channel)
	
    # Save activation data
    iofiles.save_activation(dnn_act,args.outdir)

if __name__ == '__main__':

    main()